/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as SystemPromptsIndexImport } from './routes/system-prompts/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as RoutingRulesIndexImport } from './routes/routing-rules/index'
import { Route as PromptManagementIndexImport } from './routes/prompt-management/index'
import { Route as McpServersIndexImport } from './routes/mcp-servers/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as ChatIndexImport } from './routes/chat/index'
import { Route as SettingsBillingImport } from './routes/settings/billing'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SystemPromptsIndexRoute = SystemPromptsIndexImport.update({
  id: '/system-prompts/',
  path: '/system-prompts/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const RoutingRulesIndexRoute = RoutingRulesIndexImport.update({
  id: '/routing-rules/',
  path: '/routing-rules/',
  getParentRoute: () => rootRoute,
} as any)

const PromptManagementIndexRoute = PromptManagementIndexImport.update({
  id: '/prompt-management/',
  path: '/prompt-management/',
  getParentRoute: () => rootRoute,
} as any)

const McpServersIndexRoute = McpServersIndexImport.update({
  id: '/mcp-servers/',
  path: '/mcp-servers/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const ChatIndexRoute = ChatIndexImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsBillingRoute = SettingsBillingImport.update({
  id: '/settings/billing',
  path: '/settings/billing',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/settings/billing': {
      id: '/settings/billing'
      path: '/settings/billing'
      fullPath: '/settings/billing'
      preLoaderRoute: typeof SettingsBillingImport
      parentRoute: typeof rootRoute
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/mcp-servers/': {
      id: '/mcp-servers/'
      path: '/mcp-servers'
      fullPath: '/mcp-servers'
      preLoaderRoute: typeof McpServersIndexImport
      parentRoute: typeof rootRoute
    }
    '/prompt-management/': {
      id: '/prompt-management/'
      path: '/prompt-management'
      fullPath: '/prompt-management'
      preLoaderRoute: typeof PromptManagementIndexImport
      parentRoute: typeof rootRoute
    }
    '/routing-rules/': {
      id: '/routing-rules/'
      path: '/routing-rules'
      fullPath: '/routing-rules'
      preLoaderRoute: typeof RoutingRulesIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/system-prompts/': {
      id: '/system-prompts/'
      path: '/system-prompts'
      fullPath: '/system-prompts'
      preLoaderRoute: typeof SystemPromptsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/chat': typeof ChatIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/mcp-servers': typeof McpServersIndexRoute
  '/prompt-management': typeof PromptManagementIndexRoute
  '/routing-rules': typeof RoutingRulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/system-prompts': typeof SystemPromptsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/chat': typeof ChatIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/mcp-servers': typeof McpServersIndexRoute
  '/prompt-management': typeof PromptManagementIndexRoute
  '/routing-rules': typeof RoutingRulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/system-prompts': typeof SystemPromptsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings/billing': typeof SettingsBillingRoute
  '/chat/': typeof ChatIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/mcp-servers/': typeof McpServersIndexRoute
  '/prompt-management/': typeof PromptManagementIndexRoute
  '/routing-rules/': typeof RoutingRulesIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/system-prompts/': typeof SystemPromptsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/settings/billing'
    | '/chat'
    | '/dashboard'
    | '/mcp-servers'
    | '/prompt-management'
    | '/routing-rules'
    | '/settings'
    | '/system-prompts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/settings/billing'
    | '/chat'
    | '/dashboard'
    | '/mcp-servers'
    | '/prompt-management'
    | '/routing-rules'
    | '/settings'
    | '/system-prompts'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/settings/billing'
    | '/chat/'
    | '/dashboard/'
    | '/mcp-servers/'
    | '/prompt-management/'
    | '/routing-rules/'
    | '/settings/'
    | '/system-prompts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  SettingsBillingRoute: typeof SettingsBillingRoute
  ChatIndexRoute: typeof ChatIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  McpServersIndexRoute: typeof McpServersIndexRoute
  PromptManagementIndexRoute: typeof PromptManagementIndexRoute
  RoutingRulesIndexRoute: typeof RoutingRulesIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  SystemPromptsIndexRoute: typeof SystemPromptsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  SettingsBillingRoute: SettingsBillingRoute,
  ChatIndexRoute: ChatIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  McpServersIndexRoute: McpServersIndexRoute,
  PromptManagementIndexRoute: PromptManagementIndexRoute,
  RoutingRulesIndexRoute: RoutingRulesIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  SystemPromptsIndexRoute: SystemPromptsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/settings/billing",
        "/chat/",
        "/dashboard/",
        "/mcp-servers/",
        "/prompt-management/",
        "/routing-rules/",
        "/settings/",
        "/system-prompts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/settings/billing": {
      "filePath": "settings/billing.tsx"
    },
    "/chat/": {
      "filePath": "chat/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/mcp-servers/": {
      "filePath": "mcp-servers/index.tsx"
    },
    "/prompt-management/": {
      "filePath": "prompt-management/index.tsx"
    },
    "/routing-rules/": {
      "filePath": "routing-rules/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/system-prompts/": {
      "filePath": "system-prompts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
